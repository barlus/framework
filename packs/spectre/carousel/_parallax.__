import {$,deg,linearGradient,list,neg,nest,percent,perspective,px,rem,rgba,rotateX,rotateY,s,scale,stylesheet,translate3d,translateZ} from "@barlus/restyle"

export default Theme;
export const enum Theme {
    parallax='parallax',
    parallaxBottomLeft='parallax-bottom-left',
    parallaxBottomRight='parallax-bottom-right',
    parallaxContent='parallax-content',
    parallaxFront='parallax-front',
    parallaxTopLeft='parallax-top-left',
    parallaxTopRight='parallax-top-right',
}
declare module "@barlus/restyle" {
    interface Context {
        parallaxDeg:any,
        parallaxFadeColor:any,
        parallaxOffset:any,
        parallaxOffsetZ:any,
        parallaxPerspective:any,
        parallaxScale:any,
    }
}

$.parallaxDeg = deg(3);
$.parallaxOffset = px(4.5);
$.parallaxOffsetZ = px(50);
$.parallaxPerspective = px(1000);
$.parallaxScale = .95;
$.parallaxFadeColor = rgba(255,255,255,.35);

stylesheet('/Users/Sergey/Work/EXP/spectre/scss/_parallax.ts')('',{
    ...nest([`.${Theme.parallax}`],{
        display:'block',
        height:'auto',
        position:'relative',
        width:'auto',
        ...nest([`.${Theme.parallaxContent}`],{
            ...$.shadowVariant(rem(1)),
            height:'auto',
            transform:perspective($.parallaxPerspective),
            transformStyle:'preserve-3d',
            transition:list('all',s(.4),'ease'),
            width:percent(100),
            ...nest([`&::before`],{
                content:"",
                display:'block',
                height:percent(100),
                left:0,
                position:'absolute',
                top:0,
                width:percent(100),
            }),
        }),
        ...nest([`.${Theme.parallaxFront}`],{
            alignItems:'center',
            color:$.lightColor,
            display:'flex',
            height:percent(100),
            justifyContent:'center',
            left:0,
            position:'absolute',
            textAlign:'center',
            textShadow:list(0,0,px(20),rgba($.darkColor,.75)),
            top:0,
            transform:list(translateZ($.parallaxOffsetZ),scale($.parallaxScale)),
            transition:list('all',s(.4),'ease'),
            width:percent(100),
            zIndex:$.zIndex0,
        }),
        ...nest([`.${Theme.parallaxTopLeft}`],{
            ...$.parallaxDir(),
            left:0,
            top:0,
            ...nest([`&:focus ~ .${Theme.parallaxContent}`,`&:hover ~ .${Theme.parallaxContent}`],{
                transform:list(perspective($.parallaxPerspective),rotateX($.parallaxDeg),rotateY(neg($.parallaxDeg))),
                ...nest([`&::before`],{
                    background:linearGradient(deg(135),list($.parallaxFadeColor,percent(0)),list('transparent',percent(50))),
                }),
                ...nest([`.${Theme.parallaxFront}`],{
                    transform:list(translate3d($.parallaxOffset,$.parallaxOffset,$.parallaxOffsetZ),scale($.parallaxScale)),
                }),
            }),
        }),
        ...nest([`.${Theme.parallaxTopRight}`],{
            ...$.parallaxDir(),
            right:0,
            top:0,
            ...nest([`&:focus ~ .${Theme.parallaxContent}`,`&:hover ~ .${Theme.parallaxContent}`],{
                transform:list(perspective($.parallaxPerspective),rotateX($.parallaxDeg),rotateY($.parallaxDeg)),
                ...nest([`&::before`],{
                    background:linearGradient(deg(-135),list($.parallaxFadeColor,percent(0)),list('transparent',percent(50))),
                }),
                ...nest([`.${Theme.parallaxFront}`],{
                    transform:list(translate3d(neg($.parallaxOffset),$.parallaxOffset,$.parallaxOffsetZ),scale($.parallaxScale)),
                }),
            }),
        }),
        ...nest([`.${Theme.parallaxBottomLeft}`],{
            ...$.parallaxDir(),
            bottom:0,
            left:0,
            ...nest([`&:focus ~ .${Theme.parallaxContent}`,`&:hover ~ .${Theme.parallaxContent}`],{
                transform:list(perspective($.parallaxPerspective),rotateX(neg($.parallaxDeg)),rotateY(neg($.parallaxDeg))),
                ...nest([`&::before`],{
                    background:linearGradient(deg(45),list($.parallaxFadeColor,percent(0)),list('transparent',percent(50))),
                }),
                ...nest([`.${Theme.parallaxFront}`],{
                    transform:list(translate3d($.parallaxOffset,neg($.parallaxOffset),$.parallaxOffsetZ),scale($.parallaxScale)),
                }),
            }),
        }),
        ...nest([`.${Theme.parallaxBottomRight}`],{
            ...$.parallaxDir(),
            bottom:0,
            right:0,
            ...nest([`&:focus ~ .${Theme.parallaxContent}`,`&:hover ~ .${Theme.parallaxContent}`],{
                transform:list(perspective($.parallaxPerspective),rotateX(neg($.parallaxDeg)),rotateY($.parallaxDeg)),
                ...nest([`&::before`],{
                    background:linearGradient(deg(-45),list($.parallaxFadeColor,percent(0)),list('transparent',percent(50))),
                }),
                ...nest([`.${Theme.parallaxFront}`],{
                    transform:list(translate3d(neg($.parallaxOffset),neg($.parallaxOffset),$.parallaxOffsetZ),scale($.parallaxScale)),
                }),
            }),
        }),
    }),
});
